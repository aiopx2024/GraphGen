# Conda environments
.conda/
conda-env/
*.conda

# Claude
*.claude

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Project specific directories
cache/
logs/
data/
output/
temp/
tmp*/
*.pyc
*.html
.gradio

# Docker related files
*.tar
*.tar.gz
*.tar.bz2
graphgen-offline-image.tar
docker-compose.override.yml

# Deployment packages and build artifacts
GraphGen-Offline-Package/
*.zip
*.rar
*.7z
deployment-guide.md
package-*.md
GraphGen-Simple-Deploy/

# Generated scripts and temporary files
create-offline-package.ps1
create-package.bat
build-offline-image.ps1
build-offline-image.sh
test-deployment.sh

# Environment and configuration files
.env
.env.local
.env.*.local
.env.internal
.env.production
.env.development

# API Keys and sensitive information
*.key
*.pem
*.crt
*.cert
secrets/
credentials/

# Backup and temporary files
*.bak
*.backup
*.tmp
*.swp
*.swo
*~

# OS specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini

# IDE and editor files
.vscode/
.vs/
*.sublime-*
*.code-workspace

# Testing and coverage
.coverage.*
.pytest_cache/
.tox/
.nox/
htmlcov/

# Documentation build
docs/_build/
docs/build/
site/

# Model and data files (large files)
*.model
*.pkl
*.pickle
*.h5
*.hdf5
*.safetensors
*.bin
*.pt
*.pth
*.onnx

# NLTK data
nltk_data/
resources/nltk_data/

# Gradio temporary files
gradio_cached_examples/
flagged/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Log files
*.log
*.log.*
log/
logs/

# Graph visualization outputs
*.png
*.jpg
*.jpeg
*.svg
*.pdf
*.eps
!resources/**/*.png
!resources/**/*.jpg
!resources/**/*.svg

# Knowledge graph cache
graph_cache/
kg_cache/

# Generated QA data (keep examples)
*.jsonl
!resources/input_examples/*.jsonl
!resources/output_examples/*.jsonl

# Batch processing results
batch_results/
processing_results/

# Memory and profiling
*.prof
*.pstats
memory_profiler_*.txt
